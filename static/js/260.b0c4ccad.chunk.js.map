{"version":3,"file":"static/js/260.b0c4ccad.chunk.js","mappings":"4KAKA,MAAMA,EAAeC,EAAAA,KAAW,IAAM,+BAChCC,EAAgBD,EAAAA,KAAW,IAAM,8BACjCE,EAAcF,EAAAA,KAAW,IAAM,+BAC/BG,EAAeH,EAAAA,KAAW,IAAM,uDAKhCI,EAAUC,CAAAA,SAAAA,aAAAA,WAAAA,8BAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,mBAAqB,iEAsEjD,QApEA,WACE,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,OAC5CG,EAASC,IAAcJ,EAAAA,EAAAA,UAAS,KAChCK,EAAWC,IAAgBN,EAAAA,EAAAA,WAAS,IACpCO,EAAOC,IAAYR,EAAAA,EAAAA,UAAS,IAE7BS,GAAeC,EAAAA,EAAAA,aAAYC,UAE/B,GADAC,EAAEC,iBACGf,EAAMgB,OAAX,CAEAR,GAAa,GACbJ,EAAiB,MACjBM,EAAS,IAET,IAEE,MAAMO,QAAiBC,EAAAA,EAAMC,KAAKtB,EAAS,CAAEG,SAAS,CAAEoB,QAAS,MAE3DC,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQL,EAASM,MAAI,IAAEC,UAAW,IAAIC,OAErDrB,EAAiBiB,GACjBf,EAAWoB,GAAe,CAAC,CAAE1B,QAAO2B,OAAQN,MAAgBK,GAE9D,CAAE,MAAOjB,GAAQ,IAADmB,EACdC,QAAQpB,MAAM,gCAAsBA,GAEjB,iBAAfA,EAAMqB,MAAsD,OAAb,QAAdF,EAAAnB,EAAMQ,gBAAQ,IAAAW,OAAA,EAAdA,EAAgBG,QACnDrB,EAAS,iIAETA,EAAS,2IAEb,CAAC,QACCF,GAAa,EACf,CAzByB,GA0BxB,CAACR,IAEEgC,GAAsBpB,EAAAA,EAAAA,aAAaqB,IACvC7B,EAAiB6B,EAAaN,SAC7B,IAEH,OACEO,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UAExBC,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAACC,UAAUL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,SAAC,yCAA4BA,SAAA,EAChFF,EAAAA,EAAAA,KAAC1C,EAAY,CACXQ,MAAOA,EACPC,SAAUA,EACVuC,SAAU7B,EACVJ,UAAWA,IAIZE,IAASyB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,SAAE3B,KAGxCA,IACA4B,EAAAA,EAAAA,MAAAI,EAAAA,SAAA,CAAAL,SAAA,EACEF,EAAAA,EAAAA,KAACxC,EAAa,CAACiC,OAAQxB,KACvB+B,EAAAA,EAAAA,KAACvC,EAAW,CAACU,QAASA,EAASqC,aAAcV,KAC7CE,EAAAA,EAAAA,KAACtC,EAAY,CAACS,QAASA,WAMnC,C","sources":["Dashboard.js"],"sourcesContent":["// frontend/src/Dashboard.js\r\nimport React, { useState, useCallback, Suspense } from 'react';\r\nimport axios from 'axios';\r\n\r\n// TỐI ƯU: Sử dụng React.lazy để tải component khi cần\r\nconst AnalysisForm = React.lazy(() => import('./components/analysis_form'));\r\nconst ResultDisplay = React.lazy(() => import('./components/result_display'));\r\nconst HistoryFeed = React.lazy(() => import('./components/history_feed'));\r\nconst MetricsPanel = React.lazy(() => import('./components/metric_panel'));\r\n\r\n// --- CHỈNH SỬA QUAN TRỌNG NHẤT ---\r\n// Dòng này sẽ sử dụng biến môi trường nếu có, nếu không sẽ mặc định là URL của Render.\r\n// ❗️ HÃY THAY THẾ 'your-service-name' BẰNG TÊN BACKEND SERVICE CỦA BẠN TRÊN RENDER.\r\nconst API_URL = process.env.REACT_APP_API_URL || 'https://twitter-sentiment-analysis-2-qs7y.onrender.com/analyze';\r\n\r\nfunction Dashboard() {\r\n  const [tweet, setTweet] = useState('');\r\n  const [currentResult, setCurrentResult] = useState(null);\r\n  const [history, setHistory] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(''); // Thêm state để quản lý và hiển thị lỗi\r\n\r\n  const handleSubmit = useCallback(async (e) => {\r\n    e.preventDefault();\r\n    if (!tweet.trim()) return;\r\n\r\n    setIsLoading(true);\r\n    setCurrentResult(null);\r\n    setError(''); // Xóa lỗi cũ mỗi khi bắt đầu một yêu cầu mới\r\n\r\n    try {\r\n      // Gọi API bằng URL đã được cấu hình ở trên\r\n      const response = await axios.post(API_URL, { tweet }, { timeout: 20000 }); // Tăng timeout lên 20s\r\n\r\n      const newResult = { ...response.data, timestamp: new Date() };\r\n\r\n      setCurrentResult(newResult);\r\n      setHistory(prevHistory => [{ tweet, result: newResult }, ...prevHistory]);\r\n\r\n    } catch (error) {\r\n      console.error(\"Lỗi khi phân tích:\", error);\r\n      // Cung cấp thông báo lỗi thân thiện hơn cho người dùng\r\n      if (error.code === 'ECONNABORTED' || error.response?.status === 503) {\r\n        setError(\"Máy chủ mất quá nhiều thời gian để phản hồi. Vui lòng thử lại sau.\");\r\n      } else {\r\n        setError(\"Đã xảy ra lỗi trong quá trình phân tích. Vui lòng kiểm tra lại tweet và thử lại.\");\r\n      }\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [tweet]); // Dependency array chỉ cần 'tweet' là đủ\r\n\r\n  const handleHistorySelect = useCallback((selectedItem) => {\r\n    setCurrentResult(selectedItem.result);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      {/* Suspense dùng để hiển thị fallback UI trong khi component đang được tải lười */}\r\n      <Suspense fallback={<div className=\"loading-fallback\">Đang tải giao diện...</div>}>\r\n        <AnalysisForm\r\n          tweet={tweet}\r\n          setTweet={setTweet}\r\n          onSubmit={handleSubmit}\r\n          isLoading={isLoading}\r\n        />\r\n\r\n        {/* Hiển thị thông báo lỗi một cách rõ ràng nếu có */}\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n\r\n        {/* Chỉ hiển thị các component kết quả khi không có lỗi */}\r\n        {!error && (\r\n          <>\r\n            <ResultDisplay result={currentResult} />\r\n            <HistoryFeed history={history} onItemSelect={handleHistorySelect} />\r\n            <MetricsPanel history={history} />\r\n          </>\r\n        )}\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;"],"names":["AnalysisForm","React","ResultDisplay","HistoryFeed","MetricsPanel","API_URL","process","REACT_APP_API_URL","tweet","setTweet","useState","currentResult","setCurrentResult","history","setHistory","isLoading","setIsLoading","error","setError","handleSubmit","useCallback","async","e","preventDefault","trim","response","axios","post","timeout","newResult","_objectSpread","data","timestamp","Date","prevHistory","result","_error$response","console","code","status","handleHistorySelect","selectedItem","_jsx","className","children","_jsxs","Suspense","fallback","onSubmit","_Fragment","onItemSelect"],"sourceRoot":""}